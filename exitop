#! /usr/bin/perl
#
#    Name: Exitop
# Purpose: Summarise exim logs in near real-time
#  Author: Matthew Newton
#    Date: 06 November 2008

# $Format:%H% d$

use strict;
use Curses;
use Fcntl;
use Time::Local;

use constant VERSION => '0.05';

# Try and pull in sys/ioctl.pl so that window resizes are smoother.
eval { require 'sys/ioctl.ph'; };

$SIG{INT} = \&sig;
$SIG{WINCH} = \&sig;

# Flags for the sighandler - $redraw is set if we should redraw
# the screen (ALRM signal). $sig_winch is set if the terminal has
# changed size (WINCH signal).
my $redraw = 0;
my $sig_winch = 0;

# How long should we sleep for in select if nothing has happened?
# We need to wake up every now and then to process files we are
# watching.
my $sleeptime = 2;

# Memory structures are tidied up every $tidyup times of the main loop.
my $tidyup = 10;
my $tidycount = 0; # Counter for current state.

# Blocksize for how much logfile to try and read in one go. Set it
# too small, and the program slows up; too big and the programs
# slows up _and_ eats up memory. 1M seems about right here. Files
# specified have this much data read at startup.
my $blocksize = 1024*1024;

# Highlight entries on screen if they have been around for this
# many seconds. Probably the same amount of time as the expire
# period.
my $highlightafter = 300;

# Show frequency information?
my $showfreq = 0;

# Keyboard input handling
use constant KB_MAIN  => 0;
use constant KB_INPUT => 1;
my $kbmode = [KB_MAIN];

# $stats contains the current general statistics for log lines
# (e.g. "how many from domains of leicester.ac.uk have we seen?"),
# whereas $messages contains more full information for a selection
# of complete messages, tied to $stats.
my $stats = {};
my $messages = {};

# Time of last log line seen, for displaying on screen, and comparing.
my $lastlinetime = "";
my $lasttime = 0;

# Set up bitmaps for select, to watch stdin and /dev/tty for
# keyboard input.
my $srin = "";
my $srout;

# If STDIN is a tty, then we're happy. If STDIN is a file, then we
# need to open /dev/tty (TTY), dup STDIN to a new FD, close STDIN,
# and then open /dev/tty on fd(old STDIN, probably 0).

# This is because of the broken Curses support for newterm on new
# Perls with PerlIo.

my $stdin = undef; # hashref for STDIN if file

if (! -t STDIN) {
  open(STDINFILE, "<&STDIN"); # dup STDIN
  open(TTY, "< /dev/tty");
  my $sifd = fileno(STDIN);
  close STDIN;

  open(STDIN, "<&TTY");
  if (fileno(STDIN) != $sifd) {
    # Didn't work the first time - one last try.
    close STDIN;
    open(STDIN, "<&TTY");
    die "can't reopen STDIN on fd $sifd" unless fileno(STDIN) == $sifd;
  }

  # Add the incoming file to the select vector to watch, and set
  # up the data structure for later.   
  vec($srin, fileno(STDINFILE), 1) = 1;
  $stdin = {fh => *STDINFILE{IO}, fd => fileno(STDINFILE),
            len => undef, buf => ""};
}

if (! -t STDIN) {
  die "Sorry, something has gone wrong and STDIN is not a TTY!";
}

# Screen and curses setup - $screen contains information about the
# windows we are currently displaying.
my $screen = { cursor => 0 };
screen_init();
add_windows($screen);

# Paging - we start at the top!
$$screen{page} = 0;

# Highlights and other colouring.
use constant HL_BRIGHT   => 1;
use constant HL_BRIGHTRE => 2;
use constant HL_DIM      => 3;
use constant HL_DIMRE    => 4;

$$screen{highlight} = {
#  "le(icester)?\.ac\.uk" => HL_DIMRE,
  };

# Add TTY to select vector to watch
vec($srin, fileno($$screen{terminfd}), 1) = 1;

# $logs is a hash of all log files to watch - contains:
#  key: filename of log file
#  value: hash with:
#         fh - filehandle (or undef if not open)
#         len - file size (or undef if not open)
#         buf - stuff read from file but not yet processed
my $logs = {};

# Set up $logs for each specified input log file.
foreach my $file (@ARGV) {
  if (! -r $file) {
    die "cannot read file $file";
  }
  next if defined($$logs{$file});
  $$logs{$file} = {buf => "", fh => undef, len => undef};
}

# If nothing is happening, $delay will be set to $alarm so that
# we aren't spinning around select.
my $delay = 0;

# Main program loop - first select on tty/stdin input, then test
# each logfile to see if it has grown, in which case process more
# data from it. Then refresh the terminal.
redraw();

while (1) {
  # Check for keypresses or stdin input.
  my $n = select($srout = $srin, undef, undef, $delay);
  $delay = $sleeptime;

#  my $v = unpack("b*", $srout) . "    ";
#  addstr(0,40, "vec: $v");
#  refresh();

  if (vec($srout, fileno($$screen{terminfd}), 1) == 1) {
    my $key = getch();
#    addstr(0, 70, ord($key));# unless $key == -1;
    handle_key($key) unless $key == -1;
  }

  if (defined $stdin) {
    if (vec($srout, $$stdin{fd}, 1) == 1) {
      getfromfile($stdin);
    }
  }

  foreach my $file (keys %$logs) {
    my @st = stat($file);
    my $flen = $st[7];

    # Skip this file if length is 0, or unchanged.
    $$logs{$file}{len} = $flen unless defined $$logs{$file}{len};
    next if $flen == 0 or $flen == $$logs{$file}{len};
    $$logs{$file}{len} = $flen;

    # Should be something new to read - open file if required.
    unless (defined $$logs{$file}{fh}) {
      sysopen($$logs{$file}{fh}, $file, O_RDONLY | O_NONBLOCK);
      # Store inode in case file is rotated.
      $$logs{$file}{inode} = $st[1];
      # Skip back one blocksize to get a bit of recent history, and make sure
      # we are at the beginning of a line.
      sysseek($$logs{$file}{fh}, -$blocksize, 2);
      my $bytes = 0;
      my $str = '';
      do {
        $bytes = sysread($$logs{$file}{fh}, $str, 1);
      } while ($bytes > 0 and $str != '\n');
    }

    $delay = 0 if getfromfile($$logs{$file});

    # Check to see if file is rotated.
    if (defined $$logs{$file}{inode} and $$logs{$file}{inode} != $st[1]) {
      $$logs{$file}{inode} = $st[1];
      close($$logs{$file}{fh});
      $$logs{$file}{fh} = undef;
    }
  }

  redraw();

  $tidycount--;
  if ($tidycount < 1) {
    tidy($stats);
    $tidycount = $tidyup;
  }
}

finish();


#===============================================================================

sub handle_key
{
  my $key = shift;

# Global keypresses, does not matter which mode:
  $$screen{page} += $$screen{wheight} - 2 if $key == KEY_NPAGE
                                          or $key eq chr(ord('N')-64);
  $$screen{page} -= $$screen{wheight} - 2 if $key == KEY_PPAGE
                                          or $key eq chr(ord('P')-64);

# Standard mode keypresses:
  if ($$kbmode[0] == KB_MAIN) {
    finish() if $key eq 'q';
    redraw() if $key eq chr(ord('L')-64);
    $$screen{page} += $$screen{wheight} - 2 if $key eq chr(ord('F')-64);
    $$screen{page} -= $$screen{wheight} - 2 if $key eq chr(ord('B')-64);
    $$screen{page} += int($$screen{wheight}/2) if $key eq chr(ord('D')-64);
    $$screen{page} -= int($$screen{wheight}/2) if $key eq chr(ord('U')-64);
    $$screen{page} += 1 if $key == KEY_DOWN or $key eq 'j';
    $$screen{page} -= 1 if $key == KEY_UP   or $key eq 'k';
    $$screen{page} = 0 if $key == KEY_HOME or $key eq 'g';
    $showfreq = 1 - $showfreq if $key eq 'f';
    if ($key eq 'Z') {
      $stats = {};
      $messages = {};
    }
    if ($key eq ':') {
      create_input(":", 1, 0, COLS(), \&do_cmd, ":");
    }
    if ($key eq 'h') {
      create_input("highlight:", 1, 0, COLS(), \&do_cmd, "hl");
#      create_input("highlight:", 1, 0, 20, \&do_cmd);
    }

# Line input mode keypresses:
  } elsif ($$kbmode[0] == KB_INPUT) {
    if ($key eq "\n") {
#      unpost_form($$kbmode[1]);
      finish_input($$kbmode[1]);
#      &{$$kbmode[2]}($buf);
      $kbmode = [KB_MAIN];
    } else {
#      form_driver($$kbmode[1], $key);
      process_input($$kbmode[1], $key);
    }
  }
}


#-------------------------------------------------------------------------------

sub create_input
{
  my ($title, $y, $x, $width, $callback, $cbp) = @_;

  my $field = {
    "code" => "_",
    "display" => \&display_input,
    "x" => $x, # top left of field on screen
    "y" => $y,
    "fx" => $x + length($title), # top left of field on screen
    "title" => $title,
    "width" => $width, # width of title + field
    "fwidth" => $width - length($title), # width of field on screen
    "maxlen" => 100, # max length of data entered
    "buf" => "",
    "callback" => $callback,
    "cbp" => $cbp, # first parameter to callback function
    "pos" => 0,
#    "bgchar" => "_",
    "window" => newwin(1, $width, $y, $x),
  };

  cursor(1);
  push @{$$screen{windows}}, $field;
  display_input($field);

  $kbmode = [KB_INPUT, $field];

#  my $field = new_field(1, $width - length($title), $y, $x, 0, 0);
#  set_field_buffer($field, 0, "hi");
#  my @fields = ($ {$field}, 0);
#  my $form = new_form(pack('L!*', @fields));
#  post_form($form);
#  $kbmode = [KB_INPUT, $form, $callback];
}


#-------------------------------------------------------------------------------

sub finish_input
{
  my $f = shift;

  my $buf = $$f{buf};
  my $callback = $$f{callback};
  my $cbp = $$f{cbp};
  cursor(0);
  addstr($$f{window}, 0, 0, " " x $$f{width});
  refresh($$f{window});
  delwin($$f{window});

  # There should only be one occurance of $f in $$screen{windows} - but this
  # code is probably broken and could leave some around if >1 ?
  foreach my $w (0..$#{$$screen{windows}}) {
    if ($$screen{windows}[$w] == $f) {
      delete $$screen{windows}[$w];
    }
  }

  &{$callback}($cbp, $buf);

  return $buf;
}


#-------------------------------------------------------------------------------

sub display_input
{
  my $f = shift;

  my $ds = $$f{buf};
  my $cp = $$f{pos};

# This sub needs some work...

  if ($$f{pos} > ($$f{fwidth}-1)) {
    $ds = substr($$f{buf}, -$$f{fwidth}+1);
    $cp = $$f{fwidth}-1;
  }

  addstr($$f{window}, 0, 0, $$f{title} . $ds . " ");
  noutrefresh($$f{window});
  setsyx($$f{y}, $$f{fx} + $cp);
  doupdate();
}


#-------------------------------------------------------------------------------

sub process_input
{
  my ($field, $key) = @_;

#  addstr(0,40, "** " . ord($key) . " **");
  if ($key >= 0 and $key < 10 and ord($key) > 31 and ord($key) < 127) {
    # printable char
    unless (length($$field{buf}) >= $$field{maxlen}) {
      $$field{buf} = substr($$field{buf}, 0, $$field{pos}) . $key .
                     substr($$field{buf}, $$field{pos});
      $$field{pos}++;
    }
  }
  elsif ($key == 0 and ord($key) == 21) {
    # ctrl-u : clear buffer
    $$field{pos} = 0;
    $$field{buf} = "";
    addstr($$field{window}, 0, 0, " " x $$field{width});
  }
  elsif ($key == KEY_BACKSPACE) {
    unless ($$field{pos} < 1) {
      $$field{buf} = substr($$field{buf}, 0, $$field{pos} - 1) .
                     substr($$field{buf}, $$field{pos});
      $$field{pos}--;
    }
  }
  elsif ($key == KEY_LEFT) {
    $$field{pos}--; $$field{pos} = 0 if $$field{pos} < 0;
  }
  elsif ($key == KEY_RIGHT) {
    $$field{pos}++;
    $$field{pos} = length($$field{buf}) if $$field{pos} > length($$field{buf});
  }
  elsif ($key == KEY_HOME) {
    $$field{pos} = 0;
  }
  elsif ($key == KEY_END) {
    $$field{pos} = length($$field{buf});
  }

  display_input($field);
}


#===============================================================================

sub do_cmd
{
  my $cmd = shift;
  my $buf = shift;

  if ($cmd eq ":") {
    if ($buf =~ /^([a-zA-Z]+)\s(.*)$/) {
      ($cmd, $buf) = ($1, $2);
    } else {
      $cmd = $buf;
      $buf = "";
    }
  }

  # Add a new highlights (shortcut: "h").
  if ($cmd eq 'hl') {
    if ($buf =~ s:^/(.*)/$:$1:) {
      $$screen{highlight}{$buf} = HL_BRIGHTRE;
    } else {
      $$screen{highlight}{$buf} = HL_BRIGHT;
    }
  }
  # Dim something new.
  elsif ($cmd eq 'dim') {
    if ($buf =~ s:^/(.*)/$:$1:) {
      $$screen{highlight}{$buf} = HL_DIMRE;
    } else {
      $$screen{highlight}{$buf} = HL_DIM;
    }
  }
  # Clear all highlights.
  elsif ($cmd eq 'hlclear') {
    $$screen{highlight} = {};
  }
  # Change highlight delay.
  elsif ($cmd eq 'hld' and $buf =~ /^[0-9]+$/) {
    $highlightafter = $buf;
  }

#  addstr(1,0, "***** $cmd $buf *****");
}


#===============================================================================

sub getfromfile
{
  my $finfo = shift;
  my $str;
  my $loop = 5;

  my $bytes = sysread($$finfo{fh}, $str, $blocksize);

  $$finfo{buf} .= $str;

  my $pos = 0;
  while ((my $nl = index($$finfo{buf}, "\n", $pos)) > -1) {
    my $line = substr($$finfo{buf}, $pos, $nl - $pos);
    chomp $line;

    addline($line);
  
    $pos = $nl + 1;
  }

  $$finfo{buf} = substr($$finfo{buf}, $pos);

  return length($$finfo{buf});
}


#===============================================================================

sub addline
{
  my $line = shift;
  my @bits;
  my ($date, $time, $timezone);

  loglinehook(\$line);

  @bits = split(/\s+/, $line);
  ($date, $time, @bits) = @bits;

  # Pull off timezone if log_timezone is set
  ($timezone, @bits) = @bits if $bits[0] =~ /^[\+-]?\d{4}$/;

  # timestamp on last seen line, for display
  $lastlinetime = $time;
  
  my $msg;
  my @statometer;

  # message id - required at the moment
  return unless ($bits[0] =~ /^[[:alnum:]]{6}-[[:alnum:]]{6}-[[:alnum:]]{2}$/);
  my $id = $bits[0];
  push @statometer, ["id", $bits[0]];

  my @d = split('-', $date);
  my @t = split(':', $time);
  die "er? $line" if $d[1] == 0;
  my $msgtime = timelocal($t[2], $t[1], $t[0], $d[2], $d[1] - 1, $d[0] - 1900);

  $lasttime = $msgtime;

  if (defined $id) {
    $$messages{$id} = { rcpts => [],
                        rcptdomains => [],
                        id => $id,
                        firstseen => $lasttime,
                        count => 0 } if ! defined $$messages{$id};
    $msg = $$messages{$id};
  }

  $$msg{lastseen} = $msgtime if defined $msg;

  # FROM <= lines
  if ($line =~ /\s<=\s([^\s]+@([^@\s]+))\s/ ) {
    $$msg{from} = $1 if defined $msg;
    $$msg{fromdomain} = $2 if defined $msg;

    push @statometer, ["from", $1];
    push @statometer, ["fdomain", $2];

    # from host
    if ($line =~ /\sH=([^ ]+)\s/) {
      $$msg{fhost} = $1 if defined $msg;
      push @statometer, ["fhost", $1];
    }

    # subject (multiword "delimited")
    if ($line =~ s/\sT="(.*[^\\])"//) {
      $$msg{subject} = $1 if defined $msg;
      push @statometer, ["subject", $1];
    }
  }

  # TO => lines
  if ($line =~ /[=-]>\s([^\s]+@([^@\s]+))\s/) {
    push @{$$msg{rcpts}}, $1 if defined $msg;
    push @{$$msg{rcptdomains}}, $2 if defined $msg;

    push @statometer, ["rcpt", $1];
    push @statometer, ["rdomain", $2];

    # to host
    if ($line =~ /\sH=([^ ]+)\s/) {
      $$msg{rhost} = $1 if defined $msg;
      push @statometer, ["rhost", $1];
    }
  }

  foreach my $i (0..$#statometer) {
    my $s = $statometer[$i];
    # 0 -> Number of msgs seen.
    # 1 -> Time of last message.
    # 2 -> Hashref of messages.
    # 3 -> Time of first message.
    $$stats{$$s[0]}{$$s[1]} = [0, 0, {}, $msgtime] unless defined $$stats{$$s[0]}{$$s[1]};
    $$stats{$$s[0]}{$$s[1]}[0]++;    # number seen
    # Time first and last message seen (input from several logs complicates this).
    $$stats{$$s[0]}{$$s[1]}[1] = $msgtime if $msgtime > $$stats{$$s[0]}{$$s[1]}[1];
    $$stats{$$s[0]}{$$s[1]}[3] = $msgtime if $msgtime < $$stats{$$s[0]}{$$s[1]}[3];
    if (!defined $$stats{$$s[0]}{$$s[1]}[2]{$id}) {
      $$stats{$$s[0]}{$$s[1]}[2]{$id} = $msg;  # hash of msgs for reference
      $$msg{count}++;
    }
  }
}


#===============================================================================

sub sig
{
  my $signame = shift;

  $sig_winch = 1 if $signame eq 'WINCH';

  finish() if $signame eq 'INT';
}


#===============================================================================

sub finish
{
  screen_end();
  exit(0);
}


#===============================================================================

sub redraw
{
  local *TTY;

  my ($cx, $cy);
  getsyx($cy, $cx) if $$screen{cursor};

  if ($sig_winch) {
    del_windows($screen);
    # (Need to handle input window here too.)
    if (defined &TIOCGWINSZ) {
      my $winsize;
      unless (ioctl($$screen{terminfd}, &TIOCGWINSZ, $winsize="")) {
        die sprintf "$0: ioctl TIOCGWINSZ (%08x: $!)\n", &TIOCGWINSZ;
      }
      my ($row, $col, $xpixel, $ypixel) = unpack("S4", $winsize);
      resizeterm($row, $col);
    } else {
      endwin();
      cursor();
    }
    addstr(0,0, " " x COLS());
    add_windows($screen);
    $sig_winch = 0;
  }

  foreach my $s (@{$$screen{windows}}) {
    draw_window($s, $stats);
  }

  # Title
  addstr(0,0, "exitop " . VERSION);

  # Show how many lines we are skipping:
  attron(COLOR_PAIR(2)) if $$screen{page} > 0;
  addstr(0,15, "s: " . $$screen{page} . "    ");
  attroff(COLOR_PAIR(2)) if $$screen{page} > 0;

  # Time of line last seen.
  addstr(0, COLS() - length($lastlinetime), $lastlinetime);

  my $mfreq = messagefreq();
  addstr(0, 23, "msg freq: " . sprintf("%.3f", $$mfreq[0]) . ", " .
                               sprintf("%.3f", $$mfreq[1]));

  noutrefresh();
  setsyx($cy, $cx) if $$screen{cursor};
  doupdate();
}


#===============================================================================

sub tidy
{
  my $s = shift;

  my $numperstat = 10;
  my $longesttime = 300; # remove stats if last message over 5 mins ago
  my $preservetime = 300; # preserve full message info for 5 mins
  my $preservenum = 5; # preserve at least 5 messages for each stat

#  my $t = time() - $longesttime;
#  my $pt = time() - $preservetime;
  my $t = $lasttime - $longesttime;
  my $pt = $lasttime - $preservetime;

  foreach my $code (keys %$s) {
    foreach my $data (keys %{$$s{$code}}) {

      # delete statistic if older than $longesttime seconds
      if ($$s{$code}{$data}[1] < $t) {
        # todo - lower reference counts
        foreach my $msgid (keys %{$$s{$code}{$data}[2]}) {
          my $msg = ${$$s{$code}{$data}[2]}{$msgid};
          #${$$s{$code}{$data}[2]}{$msgid}{count}--;
          $$msg{count}--;
        }
        delete $$s{$code}{$data};
        next;
      }

      # go through each recorded message for the stat, and delete if too old,
      # but leave $preservenum behind for reference (may not be the latest)
      foreach my $msgid (keys %{$$s{$code}{$data}[2]}) {
        my $msg = ${$$s{$code}{$data}[2]}{$msgid};

        # delete no more if we have less than the required num to preserve
        last if scalar keys %{$$s{$code}{$data}[2]} <= $preservenum;

        # delete if last seen too long ago
        if ($$msg{lastseen} < $pt) {
          delete ${$$s{$code}{$data}[2]}{$msgid};
          $$msg{count}--;
        }
      }
    }
  }

  foreach my $m (sort keys %$messages) {
    delete $$messages{$m} if $$messages{$m}{count} < 1;
  }
}


#===============================================================================

sub screen_init
{

# OK - for the newterm-doesnt-exist-hack again:

#  my $termifd;
#  my $termofd;
#  sysopen($termifd, "/dev/tty", O_RDONLY);
#  sysopen($termofd, "/dev/tty", O_WRONLY);
#  $$screen{terminal} = newterm($ENV{TERM}, $termofd, $termifd);
#  $$screen{terminfd} = $termifd;
#  $$screen{termoutfd} = $termofd;

  $$screen{terminal} = undef; # Actually, not presently used elsewhere.
  $$screen{terminfd} = *STDIN{IO};
  $$screen{termoutfd} = *STDOUT{IO};
  initscr();

# And back to our regular programming...
  cbreak();
  noecho();
  keypad(1);

  # Turn the cursor off; don't care where it is left.
  cursor();

  # Set up colours.
  start_color();
  init_pair(1, COLOR_YELLOW, COLOR_BLACK); # colour to highlight stale entries
  init_pair(2, COLOR_RED, COLOR_BLACK); # colour for highlighted entries
  init_pair(3, COLOR_BLUE, COLOR_BLACK); # colour for dimmed entries
}


#===============================================================================

sub screen_end
{
  endwin();
}


#===============================================================================

sub cursor
{
  my $o = shift;

  my $oc = $$screen{cursor};
  $$screen{cursor} = $o if defined $o;

  return unless !defined $o or $oc != $o;

  curs_set($$screen{cursor});
  leaveok(1 - $$screen{cursor});
}


#===============================================================================


sub messagefreq
{
  my $time = [$lasttime - 60, $lasttime - 300]; # 1-minute, 5-minute
  my $freq = [0, 0];

  foreach my $id (keys %$messages) {
    next unless defined $$messages{$id}{firstseen};
    $$freq[0]++ if $$messages{$id}{firstseen} > $$time[0];
    $$freq[1]++ if $$messages{$id}{firstseen} > $$time[1];
  }

  $$freq[0] = $$freq[0] / 60;
  $$freq[1] = $$freq[1] / 300;

  return $freq;
}

#===============================================================================

sub add_windows
{
  my $screen = shift;

  my $s;
  $$screen{windows} = [];
  
  my $sh = int((LINES()-2)/4);
  $$screen{wheight} = $sh;

  my $line = 2;

  $s = {};
  $$s{code} = "from";
  $$s{title} = "From Address";
  $$s{width} = int(COLS()/2);
  $$s{height} = $sh;
  $$s{pos} = [$line, 0];
  $$s{window} = newwin($$s{height}, $$s{width}, $$s{pos}[0], $$s{pos}[1]);
  push @{$$screen{windows}}, $s;

  $s = {};
  $$s{code} = "rcpt";
  $$s{title} = "Recipient Address";
  $$s{width} = COLS() - int(COLS()/2);
  $$s{height} = $sh;
  $$s{pos} = [$line, int(COLS()/2)];
  $$s{window} = newwin($$s{height}, $$s{width}, $$s{pos}[0], $$s{pos}[1]);
  push @{$$screen{windows}}, $s;

  $line += $sh;

  $s = {};
  $$s{code} = "fdomain";
  $$s{title} = "From Domain";
  $$s{width} = int(COLS()/2);
  $$s{height} = $sh;
  $$s{pos} = [$line, 0];
  $$s{window} = newwin($$s{height}, $$s{width}, $$s{pos}[0], $$s{pos}[1]);
  push @{$$screen{windows}}, $s;

  $s = {};
  $$s{code} = "rdomain";
  $$s{title} = "Recipient Domain";
  $$s{width} = COLS() - int(COLS()/2);
  $$s{height} = $sh;
  $$s{pos} = [$line, int(COLS()/2)];
  $$s{window} = newwin($$s{height}, $$s{width}, $$s{pos}[0], $$s{pos}[1]);
  push @{$$screen{windows}}, $s;

  $line += $sh;

  $s = {};
  $$s{code} = "fhost";
  $$s{title} = "From Host";
  $$s{width} = int(COLS()/2);
  $$s{height} = $sh;
  $$s{pos} = [$line, 0];
  $$s{window} = newwin($$s{height}, $$s{width}, $$s{pos}[0], $$s{pos}[1]);
  push @{$$screen{windows}}, $s;

  $s = {};
  $$s{code} = "rhost";
  $$s{title} = "Recipient Host";
  $$s{width} = COLS() - int(COLS()/2);
  $$s{height} = $sh;
  $$s{pos} = [$line, int(COLS()/2)];
  $$s{window} = newwin($$s{height}, $$s{width}, $$s{pos}[0], $$s{pos}[1]);
  push @{$$screen{windows}}, $s;

  $line += $sh;

  $s = {};
  $$s{code} = "subject";
  $$s{title} = "Subject";
  $$s{width} = COLS();
  $$s{height} = (LINES() - 2 - ($sh * 3));
  $$s{pos} = [$line, 0];
  $$s{window} = newwin($$s{height}, $$s{width}, $$s{pos}[0], $$s{pos}[1]);
  push @{$$screen{windows}}, $s;

  return $screen;
}


#===============================================================================

sub del_windows
{
  my $screen = shift;

  foreach my $s (@{$$screen{windows}}) {
    delwin($$s{window});
  }
}


#===============================================================================

sub draw_window
{
  my ($s, $d) = @_;
  my $colw = 6;

  if ($$s{code} eq "_") {
    my $disp = $$s{display};
    return unless defined $disp;
    return &$disp($s);
  }

  $$screen{page} = 0 if $$screen{page} < 0;

  attron($$s{window}, A_BOLD);
  attron($$s{window}, A_REVERSE);
  hline($$s{window}, 0, 0, " ", $$s{width});
  addstr($$s{window}, 0, $colw, $$s{title} . " [" .
                                scalar keys(%{$$d{$$s{code}}}) . "]");
  attroff($$s{window}, A_REVERSE);
  attroff($$s{window}, A_BOLD);

#  my $time = time() - $highlightafter;
  my $time = $lasttime - $highlightafter;
  my $off;

  if (defined $d and defined $$d{$$s{code}}) {
    # fill data in window
    my $line = 1; # Line number in window (0 is title).
    my $count = -1; # Lines of data we have seen (for paging).
    foreach my $data (sort { $$d{$$s{code}}{$b}[0] <=> $$d{$$s{code}}{$a}[0] }
                      keys %{$$d{$$s{code}}}) {
      $count++;
      next if $count < $$screen{page};

      my $hl = testhighlight($data);
      my $out = $data;

      if ($showfreq) {
        my $delta = $$d{$$s{code}}{$data}[1] - $$d{$$s{code}}{$data}[3];
        my $avg = 0;
        $avg = $$d{$$s{code}}{$data}[0] / $delta unless $delta == 0;
        $avg = sprintf("%.3f", $avg);
        $out = "[$avg] $out";
      }

      my $num = sprintf("%5d", $$d{$$s{code}}{$data}[0]);
      my $dstr = substr($out . " " x $$s{width}, 0, $$s{width} - $colw);
      addstr($$s{window}, $line, 0, $num);
      $off = 0;
      if ($hl == HL_BRIGHT) {
        attron($$s{window}, A_BOLD);
        attron($$s{window}, COLOR_PAIR(2));
      } elsif ($hl == HL_DIM) {
        attron($$s{window}, COLOR_PAIR(3));
        attron($$s{window}, A_DIM);
      }
      if ($$d{$$s{code}}{$data}[3] < $time) {
        attron($$s{window}, COLOR_PAIR(1));
        $off = 1;
      }
      addstr($$s{window}, $line, $colw, $dstr);
      if ($off) {
        attroff($$s{window}, COLOR_PAIR(1));
      }
      if ($hl == HL_BRIGHT) {
        attroff($$s{window}, COLOR_PAIR(2));
        attroff($$s{window}, A_BOLD);
      } elsif ($hl == HL_DIM) {
        attroff($$s{window}, A_DIM);
        attroff($$s{window}, COLOR_PAIR(3));
      }

      $line++;
      last if $line > $$s{height};
    }
    while ($line < $$s{height}) {
      addstr($$s{window}, $line, 0, " " x $$s{width});
      $line++;
    }
  }

  refresh($$s{window});
}


#===============================================================================

sub testhighlight
{
  my $d = shift;

  foreach my $h (keys %{$$screen{highlight}}) {
    return HL_BRIGHT if $$screen{highlight}{$h} == HL_BRIGHT and index($d, $h) > -1;
    return HL_BRIGHT if $$screen{highlight}{$h} == HL_BRIGHTRE and $d =~ $h;
    return HL_DIM if $$screen{highlight}{$h} == HL_DIM and index($d, $h) > -1;
    return HL_DIM if $$screen{highlight}{$h} == HL_DIMRE and $d =~ $h;
  }

  return 0;
}


#===============================================================================

sub loglinehook
{
  my $lref = shift;

  my %months = ("Jan" => "01", "Feb" => "02", "Mar" => "03", "Apr" => "04",
                "May" => "05", "Jun" => "06", "Jul" => "07", "Aug" => "08",
                "Sep" => "09", "Oct" => "10", "Nov" => "11", "Dec" => "12");

  my @d = localtime;
  my $year = $d[5] + 1900;

  if ($$lref =~ /^(\w{3}) ([0-9 ]{2}) (\d\d:\d\d:\d\d) (\w+) exim\[\d+\]: (.*)$/) {
    my ($mon, $day, $time, $host, $log) = ($1, $2, $3, $4, $5);
    $mon = $months{$mon};
    $day =~ s/^\s/0/;
    $$lref = "$year-$mon-$day $time +0000 $log";
  }
}

# vi:expandtab:sw=2:ts=2:tw=80:comments=:si:commentstring=
