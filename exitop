#! /usr/bin/perl -w

use strict;
use Data::Dumper;

$SIG{INT} = \&sig;
$SIG{ALRM} = \&sig;

alarm 5;

my $stats = {};
my $messages = {};

my @bits;
my ($date, $time, $timezone);

while (my $line = <>) {
  chomp $line;
  @bits = split(/\s+/, $line);
  ($date, $time, $timezone, @bits) = @bits;
	
  # should be calculated from log line, not use time()
  my $msgtime = time();

  my $id;
  my $msg;
	my @statometer;

  # message id
  if ($bits[0] =~ /^[[:alnum:]]{6}-[[:alnum:]]{6}-[[:alnum:]]{2}$/) {
    $id = $bits[0];
    push @statometer, ["id", $bits[0]];
  }

  if (defined $id) {
    $$messages{$id} = { rcpts => [], rcptdomains => [] } if ! defined $$messages{$id};
    $msg = $$messages{$id};
	}

	$$msg{lastseen} = $msgtime if defined $msg;

  if ($line =~ /\s<=\s([^\s]+@([^@\s]+))\s/ ) {
    $$msg{from} = $1 if defined $msg;
    $$msg{fromdomain} = $2 if defined $msg;
		push @statometer, ["from", $1];
		push @statometer, ["fdomain", $2];

    # subject (multiword "delimited")
    if ($line =~ s/\sT="(.*[^\\])"//) {
      $$msg{subject} = $1 if defined $msg;
			push @statometer, ["subject", $1];
    }
  }

  if ($line =~ /=>\s([^\s]+@([^@\s]+))\s/) {
    push @{$$msg{rcpts}}, $1 if defined $msg;
    push @{$$msg{rcptdomains}}, $2 if defined $msg;
		push @statometer, ["rcpt", $1];
		push @statometer, ["rdomain", $2];
 #   push @bits, "r=$1";
  }

  # subject (as before, in rejected spam)
#  if ($line =~ s/\ssubject="(.*[^\\])"//) {
#    push @bits, "z=$1";
#  }

  foreach my $i (0..$#statometer) {
	  my $s = $statometer[$i];
#		next if !defined $$s[1];
    $$stats{$$s[0]}{$$s[1]} = [0, 0] unless defined $$stats{$$s[0]}{$$s[1]};
    $$stats{$$s[0]}{$$s[1]}[0]++;
    $$stats{$$s[0]}{$$s[1]}[1] = time();
  }
#  print $line . "\n";
}

output($stats);
print Dumper $messages;


sub sig
{
  my $signame = shift;

  #print Dumper $stats;
  output($stats);
	print Dumper $messages;

  purge($stats);

  exit(0) if $signame eq 'INT';
  alarm 5 if $signame eq 'ALRM';
}

sub purge
{
  my $s = shift;
  my $t = time() - 300; # keep records for 300 seconds

  foreach my $code (keys %$s) {
    foreach my $data (keys %{$$s{$code}}) {
#      print "$data(" . $$s{$code}{$data}[0] . ")";
      if ($$s{$code}{$data}[1] < $t) {
        delete $$s{$code}{$data};
#	print "[D]";
      }
#      print " ";
    }
  }
#  print "\n";
}

sub output
{
  my $s = shift;

  foreach my $code (sort keys %$s) {
    my $count = 1;
    foreach my $data (sort { $$s{$code}{$b}[0] <=> $$s{$code}{$a}[0] } keys %{$$s{$code}}) {
      print "$code - " . $$s{$code}{$data}[0] . "\t$data\n";
      last if $count++ > 8; # max per section
      last if $$s{$code}{$data}[0] < 2; # display threshold
    }
  }
  print "-" x 80;
  print "\n\n";
}
