#! /usr/bin/perl
#
# Exitop
# Matthew Newton
# 24 October 2008
# $Format:%H% d$


use strict;
use Data::Dumper;
use Curses;
#use Curses::Form;
use Fcntl;

$SIG{INT} = \&sig;
$SIG{ALRM} = \&sig;
$SIG{WINCH} = \&sig;

# Flags for the sighandler - $redraw is set if we should redraw
# the screen (ALRM signal). $sig_winch is set if the terminal has
# changed size (WINCH signal)
my $redraw = 0;
my $sig_winch = 0;

# $alarm is how often to trigger the main alarm that refreshes the
# screen and the data structure tidy-up process.
my $alarm = 1;
my $alarmed = 0;

# Memory structures are tidied up every $tidyup times when the
# alarm has sounded.
my $tidyup = 10;
my $tidycount = 0; # Counter for current state.

# Blocksize for how much logfile to try and read in one go. Set it
# too small, and the program slows up; too big and the programs
# slows up _and_ eats up memory. 1M seems about right here.
my $blocksize = 1024*1024;

# Highlight entries on screen if they have been around for this
# many seconds. Probably the same amount of time as the expire
# period.
my $highlightafter = 300;

# Keyboard input handling
use constant KB_MAIN  => 0;
use constant KB_INPUT => 1;
my $kbmode = [KB_MAIN, undef];

# $stats contains the current general statistics for log lines
# (e.g. "how many from domains of leicester.ac.uk have we seen?"),
# whereas $messages contains more full information for a selection
# of complete messages, tied to $stats.
my $stats = {};
my $messages = {};

# Set up the alarm, which is used for screen redraws.
alarm $alarm;

# Screen and curses setup - $screen contains information about the
# windows we are currently displaying.
my $screen = {};
screen_init();
add_windows($screen);
redraw();

# Set up bitmaps for select, to watch stdin and /dev/tty for
# keyboard input.
my $srin = "";
my $srout;
vec($srin, fileno($$screen{terminfd}), 1) = 1;

# CLOSE STDIN IF A TTY, OTTHERWISE WATCH IN SELECT
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
vec($srin, fileno(STDIN), 1) = 1;

# If STDIN is not non-blocking, then things lock up as curses
# seems to make select think there is data on STDIN when there
# really is not! :(
if (!fcntl(STDIN, F_SETFL, O_NONBLOCK)) {
  screen_end();
  die "cannot set STDIN to non-blocking mode";
}

# $logs is a hash of all log files to watch - contains:
#  key: filename of log file
#  value: hash with:
#         fh - filehandle (or undef if not open)
#         len - file size (or undef if not open)
#         buf - stuff read from file but not yet processed
my $logs = {};

# Set up $logs for each specified input log file.
foreach my $file (@ARGV) {
  if (! -r $file) {
    die "cannot read file $file";
  }
  next if defined($$logs{$file});
  $$logs{$file} = {buf => "", fh => undef, len => undef, tb => 0};
}

# If nothing is happening, $delay will be set to $alarm so that
# we aren't spinning around select.
my $delay = 0;

# Main program loop - first select on tty/stdin input, then test
# each logfile to see if it has grown, in which case process more
# data from it. Finally, redraw the screen if the alarm has
# triggered.
while (1) {
# check for keypresses or stdin input
  my $n = select($srout = $srin, undef, undef, $delay);
  $delay = $alarm;

  my $v = unpack("b*", $srout) . "    ";
  addstr(0,40, "vec: $v");

  if (vec($srout, fileno($$screen{terminfd}), 1) == 1) {
    my $key = getch();
#    addstr(0, 70, $key) unless $key == -1;
    handle_key($key) unless $key == -1;
  }

  if (vec($srout, fileno(STDIN), 1) == 1) {
    my $line = <STDIN>;
    addline($line);
  }

  foreach my $file (keys %$logs) {
    my @st = stat($file);
    my $flen = $st[7];

    # Skip this file if length is 0, or unchanged.
    $$logs{$file}{len} = $flen unless defined $$logs{$file}{len};
    next if $flen == 0 or $flen == $$logs{$file}{len};
    $$logs{$file}{len} = $flen;

    # Should be something new to read - open file if required.
    unless (defined $$logs{$file}{fh}) {
      sysopen($$logs{$file}{fh}, $file, O_RDONLY | O_NONBLOCK);
      sysseek($$logs{$file}{fh}, -$blocksize, 2);
      $$logs{$file}{tb} = $flen - $blocksize;
    }

    $delay = 0 if getfromfile($$logs{$file});
  }

  if ($alarmed) {
    redraw();
    $alarmed = 0;
    alarm $alarm;

    $tidycount--;
    if ($tidycount < 1) {
      tidy($stats);
      $tidycount = $tidyup;
    }
  }
}

finish();


#===============================================================================

sub handle_key
{
  my $key = shift;

  if ($$kbmode[0] == KB_MAIN) {
    finish() if $key eq 'q';
    redraw() if $key eq chr(12);
    if ($key eq 'r') {
      create_input("re: ", 1, 0, COLS(), \&do_regex);
    }
  } elsif ($$kbmode[0] == KB_INPUT) {
    if ($key eq '\n') {
#      unpost_form($$kbmode[1]);
      &{$$kbmode[2]}();
      $kbmode = [KB_MAIN];
    } else {
#      form_driver($$kbmode[1], $key);
      process_input($$kbmode[1], $key);
    }
  }
}

sub create_input
{
  my ($title, $y, $x, $width, $callback) = @_;

  my $field = {
    "code" => "_",
    "display" => \&display_input,
    "x" => $x + length($title), # top left of field on screen
    "y" => $y,
    "title" => $title,
    "width" => $width - length($title), # width of field on screen
    "maxlen" => 100, # max length of data entered
    "buf" => "",
    "callback" => $callback,
    "pos" => 0,
    "bgchar" => "_",
    "window" => newwin(1, $width, $y, $x),
  };

  push @{$$screen{windows}}, $field;
  display_input($field);
  redraw();

  $kbmode = [KB_INPUT, \&process_input, $callback];

#  my $field = new_field(1, $width - length($title), $y, $x, 0, 0);
#  set_field_buffer($field, 0, "hi");
#  my @fields = ($ {$field}, 0);
#  my $form = new_form(pack('L!*', @fields));
#  post_form($form);
#  $kbmode = [KB_INPUT, $form, $callback];
}

sub display_input
{
  my $f = shift;

  addstr($$f{window}, 0, 0, $$f{title});
}


sub process_input
{
  my ($field, $key) = @_;

  addstr(1,0, "**** " . ord($key) . " **");
}

sub do_regex
{
  addstr(1,0, "*****");
}


#===============================================================================

sub getfromfile
{
  my $finfo = shift;
  my $str;
  my $loop = 5;

  my $bytes = sysread($$finfo{fh}, $str, $blocksize);

  $$finfo{buf} .= $str;
  $$finfo{tb} += $bytes;

  my $pos = 0;
  while ((my $nl = index($$finfo{buf}, "\n", $pos)) > -1) {
    my $line = substr($$finfo{buf}, $pos, $nl - $pos);
    chomp $line;

    addline($line);
  
    $pos = $nl + 1;
  }

  $$finfo{buf} = substr($$finfo{buf}, $pos);

  return length($$finfo{buf});
}


#===============================================================================

sub addline
{
  my $line = shift;
  my @bits;
  my ($date, $time, $timezone);

  loglinehook(\$line);

  @bits = split(/\s+/, $line);
  ($date, $time, $timezone, @bits) = @bits;
  
  # should be calculated from log line, not use time()
  my $msgtime = time();

  my $id;
  my $msg;
  my @statometer;

  # message id
  if ($bits[0] =~ /^[[:alnum:]]{6}-[[:alnum:]]{6}-[[:alnum:]]{2}$/) {
    $id = $bits[0];
    push @statometer, ["id", $bits[0]];
  }

  if (defined $id) {
    $$messages{$id} = { rcpts => [],
                        rcptdomains => [],
                        id => $id,
                        count => 0 } if ! defined $$messages{$id};
    $msg = $$messages{$id};
  }

  $$msg{lastseen} = $msgtime if defined $msg;

  # FROM <= lines
  if ($line =~ /\s<=\s([^\s]+@([^@\s]+))\s/ ) {
    $$msg{from} = $1 if defined $msg;
    $$msg{fromdomain} = $2 if defined $msg;

    push @statometer, ["from", $1];
    push @statometer, ["fdomain", $2];

    # from host
    if ($line =~ /\sH=([^ ]+)\s/) {
      $$msg{fhost} = $1 if defined $msg;
      push @statometer, ["fhost", $1];
    }

    # subject (multiword "delimited")
    if ($line =~ s/\sT="(.*[^\\])"//) {
      $$msg{subject} = $1 if defined $msg;
      push @statometer, ["subject", $1];
    }
  }

  # TO => lines
  if ($line =~ /[=-]>\s([^\s]+@([^@\s]+))\s/) {
    push @{$$msg{rcpts}}, $1 if defined $msg;
    push @{$$msg{rcptdomains}}, $2 if defined $msg;

    push @statometer, ["rcpt", $1];
    push @statometer, ["rdomain", $2];

    # to host
    if ($line =~ /\sH=([^ ]+)\s/) {
      $$msg{rhost} = $1 if defined $msg;
      push @statometer, ["rhost", $1];
    }
  }

  foreach my $i (0..$#statometer) {
    my $s = $statometer[$i];
    $$stats{$$s[0]}{$$s[1]} = [0, 0, {}, $msgtime] unless defined $$stats{$$s[0]}{$$s[1]};
    $$stats{$$s[0]}{$$s[1]}[0]++;    # number seen
    $$stats{$$s[0]}{$$s[1]}[1] = $msgtime;   # last time seen
    if (!defined $$stats{$$s[0]}{$$s[1]}[2]{$id}) {
      $$stats{$$s[0]}{$$s[1]}[2]{$id} = $msg;  # hash of msgs for reference
      $$msg{count}++;
    }
  }
}


#===============================================================================

sub sig
{
  my $signame = shift;

  $sig_winch = 1 if $signame eq 'WINCH';
  $alarmed = 1 if $signame eq 'ALRM';

  finish() if $signame eq 'INT';
}


#===============================================================================

sub finish
{
  screen_end();
  exit(0);
}


#===============================================================================

sub redraw
{
  local *TTY;

  if ($sig_winch) {
    del_windows($screen);
    if (defined &TIOCGWINSZ) {
      open(TTY, "+<", "/dev/tty");
      my $winsize;
      unless (ioctl(TTY, &TIOCGWINSZ, $winsize="")) {
        die sprintf "$0: ioctl TIOCGWINSZ (%08x: $!)\n", &TIOCGWINSZ;
      }
      close(TTY);
      my ($row, $col, $xpixel, $ypixel) = unpack("S4", $winsize);
      resizeterm($row, $col);
    } else {
      screen_end();
      screen_init();
    }
    refresh();
#    addstr(0, 30, COLS() . " x " . LINES());
#    addstr(0, 45, getmaxx() . " x " . getmaxy());
    add_windows($screen);
    $sig_winch = 0;
  }

  foreach my $s (@{$$screen{windows}}) {
    draw_window($s, $stats);
  }

#  addstr(0, 15, COLS() . " x " . LINES());
  refresh();
}


#===============================================================================

sub tidy
{
  my $s = shift;

  my $numperstat = 10;
  my $longesttime = 300; # remove stats if last message over 5 mins ago
  my $preservetime = 300; # preserve full message info for 5 mins
  my $preservenum = 5; # preserve at least 5 messages for each stat

  my $t = time() - $longesttime;
  my $pt = time() - $preservetime;

  foreach my $code (keys %$s) {
    foreach my $data (keys %{$$s{$code}}) {

      # delete statistic if older than $longesttime seconds
      if ($$s{$code}{$data}[1] < $t) {
        # todo - lower reference counts
        foreach my $msgid (keys %{$$s{$code}{$data}[2]}) {
          my $msg = ${$$s{$code}{$data}[2]}{$msgid};
          #${$$s{$code}{$data}[2]}{$msgid}{count}--;
          $$msg{count}--;
        }
        delete $$s{$code}{$data};
        next;
      }

      # go through each recorded message for the stat, and delete if too old,
      # but leave $preservenum behind for reference (may not be the latest)
      foreach my $msgid (keys %{$$s{$code}{$data}[2]}) {
        my $msg = ${$$s{$code}{$data}[2]}{$msgid};

        # delete no more if we have less than the required num to preserve
        last if scalar keys %{$$s{$code}{$data}[2]} <= $preservenum;

        # delete if last seen too long ago
        if ($$msg{lastseen} < $pt) {
          delete ${$$s{$code}{$data}[2]}{$msgid};
          $$msg{count}--;
        }
      }
    }
  }

  foreach my $m (sort keys %$messages) {
    delete $$messages{$m} if $$messages{$m}{count} < 1;
  }

}


#===============================================================================

sub screen_init
{
#  initscr();
  my $termifd;
  my $termofd;

  sysopen($termifd, "/dev/tty", O_RDONLY | O_NONBLOCK);
  sysopen($termofd, "/dev/tty", O_WRONLY);
  $$screen{terminal} = newterm($ENV{TERM}, $termofd, $termifd);
  $$screen{terminfd} = $termifd;
  $$screen{termoutfd} = $termofd;
  cbreak();
  noecho();
#  halfdelay(0);

  # turn the cursor off; don't care where it is left
  curs_set(0);
  leaveok(1);

  addstr(0,0, "exitop 0.01");

  # set up colours
  start_color();
  init_pair(1, COLOR_YELLOW, COLOR_BLACK); # colour to highlight stale entries
}


#===============================================================================

sub screen_end
{
  endwin();
}


#===============================================================================

sub add_windows
{
  my $screen = shift;

  my $s;
  $$screen{windows} = [];
  
  my $sh = int((LINES()-2)/4);

  my $line = 2;

  $s = {};
  $$s{code} = "from";
  $$s{title} = "From Address";
  $$s{width} = int(COLS()/2);
  $$s{height} = $sh;
  $$s{pos} = [$line, 0];
  $$s{window} = newwin($$s{height}, $$s{width}, $$s{pos}[0], $$s{pos}[1]);
  push @{$$screen{windows}}, $s;

  $s = {};
  $$s{code} = "rcpt";
  $$s{title} = "Recipient Address";
  $$s{width} = COLS() - int(COLS()/2);
  $$s{height} = $sh;
  $$s{pos} = [$line, int(COLS()/2)];
  $$s{window} = newwin($$s{height}, $$s{width}, $$s{pos}[0], $$s{pos}[1]);
  push @{$$screen{windows}}, $s;

  $line += $sh;

  $s = {};
  $$s{code} = "fdomain";
  $$s{title} = "From Domain";
  $$s{width} = int(COLS()/2);
  $$s{height} = $sh;
  $$s{pos} = [$line, 0];
  $$s{window} = newwin($$s{height}, $$s{width}, $$s{pos}[0], $$s{pos}[1]);
  push @{$$screen{windows}}, $s;

  $s = {};
  $$s{code} = "rdomain";
  $$s{title} = "Recipient Domain";
  $$s{width} = COLS() - int(COLS()/2);
  $$s{height} = $sh;
  $$s{pos} = [$line, int(COLS()/2)];
  $$s{window} = newwin($$s{height}, $$s{width}, $$s{pos}[0], $$s{pos}[1]);
  push @{$$screen{windows}}, $s;

  $line += $sh;

  $s = {};
  $$s{code} = "fhost";
  $$s{title} = "From Host";
  $$s{width} = int(COLS()/2);
  $$s{height} = $sh;
  $$s{pos} = [$line, 0];
  $$s{window} = newwin($$s{height}, $$s{width}, $$s{pos}[0], $$s{pos}[1]);
  push @{$$screen{windows}}, $s;

  $s = {};
  $$s{code} = "rhost";
  $$s{title} = "Recipient Host";
  $$s{width} = COLS() - int(COLS()/2);
  $$s{height} = $sh;
  $$s{pos} = [$line, int(COLS()/2)];
  $$s{window} = newwin($$s{height}, $$s{width}, $$s{pos}[0], $$s{pos}[1]);
  push @{$$screen{windows}}, $s;

  $line += $sh;

  $s = {};
  $$s{code} = "subject";
  $$s{title} = "Subject";
  $$s{width} = COLS();
  $$s{height} = (LINES() - 2 - ($sh * 3));
  $$s{pos} = [$line, 0];
  $$s{window} = newwin($$s{height}, $$s{width}, $$s{pos}[0], $$s{pos}[1]);
  push @{$$screen{windows}}, $s;

  return $screen;
}


#===============================================================================

sub del_windows
{
  my $screen = shift;

  foreach my $s (@{$$screen{windows}}) {
    delwin($$s{window});
  }
}


#===============================================================================

sub draw_window
{
  my ($s, $d) = @_;
  my $colw = 6;

  if ($$s{code} eq "_") {
    my $disp = $$s{display};
    return unless defined $disp;
    return &$disp($s);
  }

  attron($$s{window}, A_BOLD);
  attron($$s{window}, A_REVERSE);
  hline($$s{window}, 0, 0, " ", $$s{width});
  addstr($$s{window}, 0, $colw, $$s{title});
  attroff($$s{window}, A_REVERSE);
  attroff($$s{window}, A_BOLD);

  my $time = time() - $highlightafter;
  my $off;

  if (defined $d and defined $$d{$$s{code}}) {
    # fill data in window
    my $line = 1;
    foreach my $data (sort { $$d{$$s{code}}{$b}[0] <=> $$d{$$s{code}}{$a}[0] }
                      keys %{$$d{$$s{code}}}) {
      my $num = sprintf("%5d", $$d{$$s{code}}{$data}[0]);
      my $dstr = substr($data . " " x $$s{width}, 0, $$s{width} - $colw);
      addstr($$s{window}, $line, 0, $num);
      $off = 0;
      if ($$d{$$s{code}}{$data}[3] < $time) {
        attron($$s{window}, COLOR_PAIR(1));
        $off = 1;
      }
      addstr($$s{window}, $line++, $colw, $dstr);
      attroff($$s{window}, COLOR_PAIR(1)) if $off;

      last if $line > $$s{height};
    }
    while ($line < $$s{height}) {
      addstr($$s{window}, $line++, 0, " " x $$s{width});
    }
  }

  refresh($$s{window});
}


#===============================================================================

sub loglinehook
{
  my $lref = shift;

  my %months = ("Jan" => "01", "Feb" => "02", "Mar" => "03", "Apr" => "04",
                "May" => "05", "Jun" => "06", "Jul" => "07", "Aug" => "08",
                "Sep" => "09", "Oct" => "10", "Nov" => "11", "Dec" => "12");

  my @d = localtime;
  my $year = $d[5] + 1900;

  if ($$lref =~ /^(\w{3}) ([0-9 ]{2}) (\d\d:\d\d:\d\d) (\w+) exim\[\d+\]: (.*)$/) {
    my ($mon, $day, $time, $host, $log) = ($1, $2, $3, $4, $5);
    $mon = $months{$mon};
    $day =~ s/^\s/0/;
    $$lref = "$year-$mon-$day $time +0000 $log";
  }
}


# vi:expandtab:sw=2:ts=2:comments=:si:commentstring=
