#! /usr/bin/perl -w

use strict;
use Data::Dumper;
use Curses;

$SIG{INT} = \&sig;
$SIG{ALRM} = \&sig;
$SIG{WINCH} = \&sig;
my $redraw = 0;
my $alarm = 1;
my $sig_winch = 0;
my $tidyup = 10;
my $tidycount = 0;

alarm $alarm;

my $debug = 0;

my $stats = {};
my $messages = {};

my $screen = screen_init();
add_windows($screen);
addstr(0,0, "exitop 0.01");
redraw();

my @bits;
my ($date, $time, $timezone);

while (my $line = <>) {
  $redraw = 1;

  chomp $line;
  @bits = split(/\s+/, $line);
  ($date, $time, $timezone, @bits) = @bits;
  
  # should be calculated from log line, not use time()
  my $msgtime = time();

  my $id;
  my $msg;
  my @statometer;

  # message id
  if ($bits[0] =~ /^[[:alnum:]]{6}-[[:alnum:]]{6}-[[:alnum:]]{2}$/) {
    $id = $bits[0];
    push @statometer, ["id", $bits[0]];
  }

  if (defined $id) {
    $$messages{$id} = { rcpts => [],
                        rcptdomains => [],
                        id => $id,
                        count => 0 } if ! defined $$messages{$id};
    $msg = $$messages{$id};
  }

  $$msg{lastseen} = $msgtime if defined $msg;

  # FROM <= lines
  if ($line =~ /\s<=\s([^\s]+@([^@\s]+))\s/ ) {
    $$msg{from} = $1 if defined $msg;
    $$msg{fromdomain} = $2 if defined $msg;

    push @statometer, ["from", $1];
    push @statometer, ["fdomain", $2];

    # from host
    if ($line =~ /\sH=([^ ]+)\s/) {
      $$msg{fhost} = $1 if defined $msg;
      push @statometer, ["fhost", $1];
    }

    # subject (multiword "delimited")
    if ($line =~ s/\sT="(.*[^\\])"//) {
      $$msg{subject} = $1 if defined $msg;
      push @statometer, ["subject", $1];
    }
  }

  # TO => lines
  if ($line =~ /=>\s([^\s]+@([^@\s]+))\s/) {
    push @{$$msg{rcpts}}, $1 if defined $msg;
    push @{$$msg{rcptdomains}}, $2 if defined $msg;

    push @statometer, ["rcpt", $1];
    push @statometer, ["rdomain", $2];

    # to host
    if ($line =~ /\sH=([^ ]+)\s/) {
      $$msg{rhost} = $1 if defined $msg;
      push @statometer, ["rhost", $1];
    }
  }

  # subject (as before, in rejected spam)
#  if ($line =~ s/\ssubject="(.*[^\\])"//) {
#    push @bits, "z=$1";
#  }

  foreach my $i (0..$#statometer) {
    my $s = $statometer[$i];
#    next if !defined $$s[1];
    $$stats{$$s[0]}{$$s[1]} = [0, 0, {}] unless defined $$stats{$$s[0]}{$$s[1]};
    $$stats{$$s[0]}{$$s[1]}[0]++;    # number seen
    $$stats{$$s[0]}{$$s[1]}[1] = time();   # last time seen
    if (!defined $$stats{$$s[0]}{$$s[1]}[2]{$id}) {
      $$stats{$$s[0]}{$$s[1]}[2]{$id} = $msg;  # hash of msgs for reference
      $$msg{count}++;
    }
    print "ref+ $$msg{id} $$msg{count} $$s[0] $$s[1]\n" if $debug;
  }
#  print $line . "\n";

  redraw() if $redraw == 2;
#  print "HIT\n" if $redraw == 2;
#  exit if $redraw == 2;
  $redraw = 0;
}

#output($stats);
#print Dumper $messages;


sub sig
{
  my $signame = shift;

  if ($signame eq 'ALRM') {
    if ($redraw > 0) {
      $redraw = 2;
    } else {
      redraw();
    }

    $tidycount--;
    if ($tidycount < 1) {
      tidy($stats);
      $tidycount = $tidyup;
    }

    alarm $alarm;
    return;
  }

  if ($signame eq 'WINCH') {
    $sig_winch = 1;
  }

  #print Dumper $stats;
#  output($stats);
#  print Dumper $messages;

  tidy($stats);

  finish() if $signame eq 'INT';
}

sub finish
{
  screen_end();
  exit(0);
}

sub redraw
{
#  output($stats);
  if ($sig_winch) {
    del_windows($screen);
    screen_end();
    $screen = screen_init();
    add_windows($screen);
    $sig_winch = 0;
  }

  foreach my $s (@{$$screen{windows}}) {
    draw_window($s, $stats);
  }
  refresh();
}

sub output
{
  my $s = shift;

  print "-" x 80;
  print "\n";

  foreach my $code (sort keys %$s) {
    my $count = 1;
    foreach my $data (sort { $$s{$code}{$b}[0] <=> $$s{$code}{$a}[0] }
                      keys %{$$s{$code}}) {
      foreach my $msgs (sort keys %{$$s{$code}{$data}[2]}) {
        print "$code - " . $$s{$code}{$data}[0] . "\t$data ";
        print "  $msgs";
        print "\n";
      }

      last if $count++ > 8; # max per section
      last if $$s{$code}{$data}[0] < 2; # display threshold
    }
  }
  print "-" x 80;
  print "\n\n";
}

sub tidy
{
  my $s = shift;

  my $numperstat = 10;
  my $longesttime = 300; # remove stats if last message over 5 mins ago
  my $preservetime = 300; # preserve full message info for 5 mins
  my $preservenum = 5; # preserve 5 messages for each stat

  my $t = time() - $longesttime;
  my $pt = time() - $preservetime;

  foreach my $code (keys %$s) {
    foreach my $data (keys %{$$s{$code}}) {

      # delete statistic if older than $longesttime seconds
      if ($$s{$code}{$data}[1] < $t) {
        # todo - lower reference counts
        foreach my $msgid (keys %{$$s{$code}{$data}[2]}) {
          my $msg = ${$$s{$code}{$data}[2]}{$msgid};
          #${$$s{$code}{$data}[2]}{$msgid}{count}--;
          $$msg{count}--;
          print "ref_ $$msg{id} $$msg{count} $code $data\n" if $debug;
        }
        print "del  " . $$s{$code}{$data}[0] . " " . $$s{$code}{$data}[1] .
              " $code $data\n" if $debug;
        delete $$s{$code}{$data};
        next;
      }

#      print "T:";
      # go through each recorded message for the stat, and delete if too old,
      # but leave $preservenum behind for reference (may not be the latest)
      foreach my $msgid (keys %{$$s{$code}{$data}[2]}) {
        my $msg = ${$$s{$code}{$data}[2]}{$msgid};
#        print " $msgid(";
#        print $$msg{lastseen};
#        print ")";
#        print ${$$s{$code}{$data}[2]}{$msgid}{lastseen};
#        print "/" . scalar keys %{$$s{$code}{$data}[2]} ;

        # delete no more if we have less than the required num to preserve
        last if scalar keys %{$$s{$code}{$data}[2]} <= $preservenum;

        # delete if last seen too long ago
        if ($$msg{lastseen} < $pt) {
          delete ${$$s{$code}{$data}[2]}{$msgid};
          $$msg{count}--;
          print "ref- $$msg{id} $$msg{count} $code $data\n" if $debug;
#          delete $$messages{$$msg{id}} if $$msg{count} < 2;
        }
      }
#      print "\n";
    }
  }

#  print Dumper $messages;
  foreach my $m (sort keys %$messages) {
    print "mesg $m -> (" . $$messages{$m}{count} . ")\n" if $debug;
    delete $$messages{$m} if $$messages{$m}{count} < 1;
  }

}

sub screen_init
{
  my $screen = {};

  initscr();
  curs_set(0);
  cbreak();
  noecho();
  leaveok(1);

  return $screen;
}

sub add_windows
{
  my $screen = shift;

  my $s;
  $$screen{windows} = [];
  
  my $sh = int((LINES()-2)/4);

  my $line = 2;

  $s = {};
  $$s{code} = "from";
  $$s{title} = "From Address";
  $$s{width} = COLS()/2;
  $$s{height} = $sh;
  $$s{pos} = [$line, 0];
  $$s{window} = newwin($$s{height}, $$s{width}, $$s{pos}[0], $$s{pos}[1]);
  push @{$$screen{windows}}, $s;

  $s = {};
  $$s{code} = "rcpt";
  $$s{title} = "Recipient Address";
  $$s{width} = COLS() - COLS()/2;
  $$s{height} = $sh;
  $$s{pos} = [$line, COLS()/2];
  $$s{window} = newwin($$s{height}, $$s{width}, $$s{pos}[0], $$s{pos}[1]);
  push @{$$screen{windows}}, $s;

  $line += $sh;

  $s = {};
  $$s{code} = "fdomain";
  $$s{title} = "From Domain";
  $$s{width} = COLS()/2;
  $$s{height} = $sh;
  $$s{pos} = [$line, 0];
  $$s{window} = newwin($$s{height}, $$s{width}, $$s{pos}[0], $$s{pos}[1]);
  push @{$$screen{windows}}, $s;

  $s = {};
  $$s{code} = "rdomain";
  $$s{title} = "Recipient Domain";
  $$s{width} = COLS() - COLS()/2;
  $$s{height} = $sh;
  $$s{pos} = [$line, COLS()/2];
  $$s{window} = newwin($$s{height}, $$s{width}, $$s{pos}[0], $$s{pos}[1]);
  push @{$$screen{windows}}, $s;

  $line += $sh;

  $s = {};
  $$s{code} = "fhost";
  $$s{title} = "From Host";
  $$s{width} = COLS()/2;
  $$s{height} = $sh;
  $$s{pos} = [$line, 0];
  $$s{window} = newwin($$s{height}, $$s{width}, $$s{pos}[0], $$s{pos}[1]);
  push @{$$screen{windows}}, $s;

  $s = {};
  $$s{code} = "rhost";
  $$s{title} = "Recipient Host";
  $$s{width} = COLS() - COLS()/2;
  $$s{height} = $sh;
  $$s{pos} = [$line, COLS()/2];
  $$s{window} = newwin($$s{height}, $$s{width}, $$s{pos}[0], $$s{pos}[1]);
#  $$s{window} = newwin($$s{height}, $$s{width}, @$$s{pos});
  push @{$$screen{windows}}, $s;

  $line += $sh;

  $s = {};
  $$s{code} = "subject";
  $$s{title} = "Subject";
  $$s{width} = COLS();
  $$s{height} = (LINES() - 2 - ($sh * 3));
  $$s{pos} = [$line, 0];
  $$s{window} = newwin($$s{height}, $$s{width}, $$s{pos}[0], $$s{pos}[1]);
  push @{$$screen{windows}}, $s;

  return $screen;
}

sub del_windows
{
  my $screen = shift;

  foreach my $s (@{$$screen{windows}}) {
    delwin($$s{window});
  }
}

sub draw_window
{
  my ($s, $d) = @_;
  my $colw = 6;

  attron($$s{window}, A_BOLD);
  attron($$s{window}, A_REVERSE);
  hline($$s{window}, 0, 0, " ", $$s{width});
  addstr($$s{window}, 0, $colw, $$s{title});
  attroff($$s{window}, A_REVERSE);
  attroff($$s{window}, A_BOLD);

  if (defined $d and defined $$d{$$s{code}}) {
    # fill data in window
    my $line = 1;
    foreach my $data (sort { $$d{$$s{code}}{$b}[0] <=> $$d{$$s{code}}{$a}[0] }
                      keys %{$$d{$$s{code}}}) {
      my $num = sprintf("%5d", $$d{$$s{code}}{$data}[0]);
      my $dstr = substr($data . " " x $$s{width}, 0, $$s{width} - $colw);
#      addstr("$num - $dstr : ");
      addstr($$s{window}, $line, 0, $num);
      addstr($$s{window}, $line++, $colw, $dstr);

#      foreach my $msgs (sort keys %{$$s{$code}{$data}[2]}) {
#        print "$code - " . $$s{$code}{$data}[0] . "\t$data ";
#        print "  $msgs";
#        print "\n";
#      }

      last if $line > $$s{height};
    }
    while ($line < $$s{height}) {
      addstr($$s{window}, $line++, 0, " " x $$s{width});
    }
  }

#  addstr($$s{window}, 1, 0, "01234 Hello world");
  refresh($$s{window});
}


sub screen_end
{
  endwin;
}

# vi:expandtab:sw=2:ts=2:comments=:si:commentstring=
